# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

#pipeline will run when changes pushed to main branch
trigger:
  - main
  
#import variable from azure keyvault
variables:
  - group: "Battleships Terraform Secrets"

#use pool named 'Self-Hosted' defined in azure devops.
pool:
  name: Self-Hosted

jobs:
  - job: A1
    container: ukhydrographicoffice/terraform-azure-powershell:latest
    steps:

    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'

    - script: |
        npm install -g @angular/cli@13.2.6
        npm install
        ng build
      displayName: 'npm install Angular and build app'
      workingDirectory: '$(Build.SourcesDirectory)/BattleShip_Site'

      #Initialise terraform using manually defined project secrets (variables in Battleships Terraform Secrets). Gives terraform access #and location to store .tfstate file in azure blob storage.
    - bash: |
        terraform init \
        -backend-config="resource_group_name=$tf-resource-group-name" \
        -backend-config="storage_account_name=$tf-storage-account-name" \
        -backend-config="container_name=$tf-container-name"
      displayName: 'terraform init'
      workingDirectory: '$(Build.SourcesDirectory)/BattleShip_Site/build/terraform'
      env:
        TF_VAR_ARM_SUBSCRIPTION_ID: $(tf-subscription-id)
        TF_VAR_ARM_TENANT_ID: $(tf-tenant-id)
        TF_VAR_ARM_CLIENT_ID: $(tf-client-id)
        TF_VAR_ARM_CLIENT_SECRET: $(tf-client-secret)

#- bash: | terraform plan

#- bash: | terraform apply 

## publish code to resources created by terraform