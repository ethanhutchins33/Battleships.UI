trigger:
  - main

variables:
  - group: BattleShipsSecrets

pool:
  name: Self-Hosted

jobs:
  - job: Build-Deploy
    container: ukhydrographicoffice/terraform-azure-powershell:latest
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "16.x"
        displayName: "Install Node.js"

      - script: |
          corepack enable
          npm install -g @angular/cli@13.2.6
          yarn
          ng build --configuration 'production'
        displayName: "Yarn - Install Angular CLI and build app"
        workingDirectory: "$(Build.SourcesDirectory)"

      - bash: |
          terraform init
        displayName: "terraform init"
        workingDirectory: "$(Build.SourcesDirectory)/terraform"
        env:
          TF_VAR_ARM_SUBSCRIPTION_ID: $(tf-subscription-id)
          TF_VAR_ARM_TENANT_ID: $(tf-tenant-id)
          TF_VAR_ARM_CLIENT_ID: $(tf-client-id)
          TF_VAR_ARM_CLIENT_SECRET: $(tf-client-secret)
          ARM_ACCESS_KEY: $(tf-access-key)

      - bash: |
          terraform plan -input=false -out=tfplan
        displayName: "terraform plan"
        workingDirectory: "$(Build.SourcesDirectory)/terraform"
        env:
          TF_VAR_ARM_SUBSCRIPTION_ID: $(tf-subscription-id)
          TF_VAR_ARM_TENANT_ID: $(tf-tenant-id)
          TF_VAR_ARM_CLIENT_ID: $(tf-client-id)
          TF_VAR_ARM_CLIENT_SECRET: $(tf-client-secret)
          ARM_ACCESS_KEY: $(tf-access-key)

      - bash: |
          terraform apply "tfplan"
        displayName: "terraform apply"
        workingDirectory: "$(Build.SourcesDirectory)/terraform"
        env:
          TF_VAR_ARM_SUBSCRIPTION_ID: $(tf-subscription-id)
          TF_VAR_ARM_TENANT_ID: $(tf-tenant-id)
          TF_VAR_ARM_CLIENT_ID: $(tf-client-id)
          TF_VAR_ARM_CLIENT_SECRET: $(tf-client-secret)
          ARM_ACCESS_KEY: $(tf-access-key)

      - publish: "$(System.DefaultWorkingDirectory)/dist/battle-ships"
        artifact: drop

      - task: AzureCLI@2
        displayName: Azure CLI
        inputs:
          azureSubscription: Visual Studio Enterprise Subscription(a334913d-52be-4a66-9c85-c23d324393f0)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az storage blob upload-batch --overwrite --destination "\$web" --source "$(System.DefaultWorkingDirectory)/dist/battle-ships" --account-name "bsstaticstorage"

      - bash: cd $(Pipeline.Workspace); echo $(ls)

      - bash: cd $(Pipeline.Workspace)/app; echo $(ls)

      # - task: AzureStaticWebApp@0
      #   inputs:
      #     workingDirectory: "$(System.DefaultWorkingDirectory)/dist/battle-ships"
      #     app_location: "/"
      #     #app_build_command: # string. App build command.
      #     #output_location: # string. Output location.
      #     #api_location: # string. Api location.
      #     #api_build_command: # string. Api build command.
      #     #routes_location: # string. Routes location.
      #     #config_file_location: # string. Config file location.
      #     #skip_app_build: # boolean. Skip app build.
      #     #skip_api_build: # boolean. Skip api build.
      #     #is_static_export: # boolean. Set static export.
      #     #verbose: # boolean. Verbose.
      #     #build_timeout_in_minutes: # string. Build timeout in minutes.
      #     #azure_static_web_apps_api_token: # string. Azure Static Web Apps api token.
      #     #deployment_environment: # string. Deployment Environment.
      #     #production_branch: # string. Production Branch.

      # - task: AzureStaticWebApp@0
      #   inputs:
      #     workingDirectory: "$(Pipeline.Workspace)"
      #     app_location: "/"
      #     skip_app_build: true
      #     skip_api_build: true
      #     verbose: true
      #   env:
      #     azure_static_web_apps_api_token: "$(deployment_token)"
